<?php

/*=======================================================================================
 *																						*
 *								COntologyWrapper.inc.php								*
 *																						*
 *======================================================================================*/
 
/**
 *	{@link COntologyWrapper} definitions.
 *
 *	This file contains common definitions used by the {@link COntologyWrapper} class.
 *
 *	@package	MyWrapper
 *	@subpackage	Wrappers
 *
 *	@author		Milko A. Škofič <m.skofic@cgiar.org>
 *	@version	1.00 07/11/2011
 */

/*=======================================================================================
 *	WEB-SERVICE REQUEST PARAMETERS														*
 *======================================================================================*/

/**
 * Language.
 *
 * This offset tags the element that holds the list of languages in which elements of type
 * {@link kTYPE_LSTRING} should be returned in.
 *
 * The parameter must be expressed as an array.
 *
 * Type: string.
 * Cardinality: any.
 */
define( "kAPI_LANGUAGE",						':WS:LANGUAGE' );

/**
 * Relationship origin.
 *
 * This offset tags the element that holds the subject of a relationship, the parameter must
 * be expressed as the native identifier, {@link kTAG_NID}, of the node that represents the
 * origin of the relationship, or the object that relates to the relationship object,
 * {@link kAPI_REL_TO}, via the relationship predicate, {@link kAPI_PREDICATE}.
 *
 * Type: integer.
 * Cardinality: any.
 */
define( "kAPI_REL_FROM",						':WS:REL-FROM' );

/**
 * Relationship destination.
 *
 * This offset tags the element that holds the object of a relationship, the parameter must
 * be expressed as the native identifier, {@link kTAG_NID}, of the node that represents the
 * destination of the relationship, or the object that is related to by the relationship
 * subject, {@link kAPI_REL_FROM}, via the relationship predicate, {@link kAPI_PREDICATE}.
 *
 * Type: integer.
 * Cardinality: any.
 */
define( "kAPI_REL_TO",							':WS:REL-TO' );

/**
 * Propagate relationship.
 *
 * This offset represents a switch which determines whether relationships should be mirrored
 * from alias nodes to master nodes.
 *
 * This parameter is a boolean that will propagate relationships if <tt>TRUE</tt> and will
 * not if missing or <tt>FALSE</tt>.
 *
 * Type: boolean.
 * Cardinality: one.
 */
define( "kAPI_REL_MIRROR",						':WS:REL-MIRROR' );

/**
 * Predicate.
 *
 * This offset tags the element that holds the list of predicates that the requested
 * relationships must match, or the predicate of a relationship that should be established.
 *
 * The parameter must be expressed as a scalar or an array of term global identifiers,
 * {@link kTAG_GID}.
 *
 * Type: string.
 * Cardinality: any.
 */
define( "kAPI_PREDICATE",						':WS:PREDICATE' );

/**
 * Relations sense.
 *
 * This offset tags the element that holds the sense in which relations should be returned:
 *
 * <ul>
 *	<li><tt>{@link kAPI_RELATION_IN}</tt>: Input, all elements that point to the current
 *		vertex.
 *	<li><tt>{@link kAPI_RELATION_OUT}</tt>: Output, all elements to which the current vertex
 *		points to.
 *	<li><tt>{@link kAPI_RELATION_ALL}</tt>: All, all elements with which the current vertex
 *		is related.
 *	<li><i>missing</i>: If the parameter is missing, it is assumed you only want the vertex.
 * </ul>
 *
 * The parameter must be expressed as a string scalar.
 *
 * Type: string.
 * Cardinality: one.
 */
define( "kAPI_RELATION",						':WS:RELATION' );

/**
 * Sub-query filter.
 *
 * This is the tag that represents the data store sub-filter or sub-query. This parameter is
 * a query which is applied to the selection of the main query ({@link kAPI_QUERY}), it is
 * only used in cases where the result is not directly generated by the {@link kAPI_QUERY}.
 *
 * This parameter is provided as an encoded {@link CQuery} object. Note that the database
 * and the container must be implied by the operation, since they have no parameter.
 *
 * Type: encoded.
 * Cardinality: one or zero.
 */
define( "kAPI_SUBQUERY",						':WS:SUBQUERY' );

/*=======================================================================================
 *	WEB-SERVICE RESPONSE PARAMETERS														*
 *======================================================================================*/

/**
 * Identifier elements.
 *
 * This offset tags the element that holds the list of identifiers of the requested items.
 */
define( "kAPI_COLLECTION_ID",					'_ids' );

/**
 * Predicate elements.
 *
 * This offset tags the element that holds the list of referenced predicate items.
 */
define( "kAPI_COLLECTION_TERM",					'_term' );

/**
 * Vertex elements.
 *
 * This offset tags the element that holds the list of referenced vertex items.
 */
define( "kAPI_COLLECTION_NODE",					'_node' );

/**
 * Edge elements.
 *
 * This offset tags the element that holds the list of referenced edge items.
 */
define( "kAPI_COLLECTION_EDGE",					'_edge' );

/**
 * Tag elements.
 *
 * This offset tags the element that holds the list of referenced tag items.
 */
define( "kAPI_COLLECTION_TAG",					'_tag' );

/*=======================================================================================
 *	WEB-SERVICE OPERATIONS																*
 *======================================================================================*/

/**
 * SetTerm web-service.
 *
 * This is the tag that represents the SetTerm web-service operation, which inserts the
 * provided object as a new term.
 *
 * The service expects the following parameters:
 *
 * <ul>
 *	<li><i>{@link kAPI_FORMAT}</i>: This parameter is required to indicate how to
 *		encode the response.
 *	<li><i>{@link kAPI_DATABASE}</i>: This parameter is required to indicate the working
 *		database. Note that the {@link kAPI_CONTAINER} will be ignored by this service.
 *	<li><i>{@link kAPI_OBJECT}</i>: This parameter is required and contains an array
 *		corresponding to the new term record, the following attributes will not be
 *		considered: {@link kTAG_NAMESPACE_REFS}, {@link kTAG_SCALES}, {@link kTAG_METHODS},
 *		{@link kTAG_FEATURES}, {@link kTAG_NODES}, {@link kTAG_KIND}, {@link kTAG_TERM},
 *		{@link kTAG_GID}, {@link kTAG_CLASS} and {@link kTAG_NID}.
 *	<li><i>{@link kAPI_CLASS}</i>: If provided, this parameter indicates which instance the
 *		object should be; if not provided, the {@link kAPI_CONTAINER} parameter is required
 *		and the object will simply be added to the container.
 * </ul>
 *
 * The service will attempt to <i>insert</i> the provided object, if successful, it will
 * return the newly created {@link kTAG_NID} identifier in the
 * {@link kTERM_STATUS_IDENTIFIER} return parameter and the updated object in the
 * {@link kAPI_RESPONSE}.
 *
 * <i>Note that all term references, specifically the {@link kTAG_NAMESPACE} attribute, must
 * be provided as either a {@link CDataTypeBinary} instance, in which case it is assumed to
 * be the {@link kTAG_NID} of the namespace, or as a string, in which case it is supposed to
 * be the namespace's {@link kTAG_GID}.</i>
 */
define( "kAPI_OP_SetTerm",			'WS:OP:SetTerm' );

/**
 * SetNamespace web-service.
 *
 * This is the tag that represents the SetNamespace web-service operation, which inserts the
 * provided object as a new namespace term.
 *
 * The service expects the same parameters as the {@link kAPI_OP_SetTerm} service and will
 * perform the same actions, except that it will set the term {@link kTAG_KIND} to
 * {@link kKIND_NAMESPACE}.
 */
define( "kAPI_OP_SetNamespace",		'WS:OP:SetNamespace' );

/**
 * GetTerm web-service.
 *
 * This is the tag that represents the GetTerm web-service operation, which will return a
 * list of terms according to the provided parameters:
 *
 * The service expects the following parameters:
 *
 * <ul>
 *	<li><i>{@link kAPI_FORMAT}</i>: This parameter is required to indicate how to encode the
 *		response.
 *	<li><i>{@link kAPI_DATABASE}</i>: This parameter is required to indicate the working
 *		database.
 *	<li><i>{@link kAPI_SORT}</i>: This parameter is an array listing which fields are to
 *		be considered in the sort order, the array is indexed by the field name and the
 *		value should be a number that represents the sense: positive will be considered
 *		<i>ascending</i> and negative values <i>descending</i>; zero values will be ignored.
 *	<li><i>{@link kAPI_PAGE_LIMIT}</i>:This parameter is required or enforced, it represents
 *		the maximum number of elements that the query should return, the default value is
 *		{@link kDEFAULT_LIMIT}.
 *	<li><i>{@link kAPI_QUERY}</i>: This parameter will hold the selection criteria for the
 *		term. <i>It is possible to provide the {@link kTAG_NAMESPACE} parameter in the query
 *		both as the term {@link kTAG_GID} or the actual term reference: the service will
 *		take care of converting the {@link kTAG_GID} to the {@link kTAG_NID}.</i>
 * </ul>
 *
 * <i>Note that the {@link kAPI_SELECT} parameter will be disabled by default: since there
 * are a number of fields that reference other objects we decided to disable this option
 * rather than adding exceptions that in the long run would become difficult to track.</i>
 */
define( "kAPI_OP_GetTerm",			'WS:OP:GetTerm' );

/**
 * SetVertex web-service.
 *
 * This is the tag that represents the SetVertex web-service operation, which inserts the
 * provided object as a new vertex.
 *
 * The service expects the following parameters:
 *
 * <ul>
 *	<li><i>{@link kAPI_FORMAT}</i>: This parameter is required to indicate how to
 *		encode the response.
 *	<li><i>{@link kAPI_DATABASE}</i>: This parameter is required to indicate the working
 *		database. Note that the {@link kAPI_CONTAINER} will be ignored by this service.
 *	<li><i>{@link kAPI_OBJECT}</i>: This parameter is required and contains an array
 *		corresponding to the new vertex record, the following attributes will not be
 *		considered: {@link kTAG_NID}, {@link kTAG_CLASS}, {@link kTAG_NODE},
 *		{@link kTAG_EDGES} and {@link kTAG_NODES}.
 *	<li><i>{@link kAPI_CLASS}</i>: This parameter is required to determine whether the
 *		instance to be created is a master or an alias.
 * </ul>
 *
 * The service will attempt to <i>insert</i> the provided object, if successful, it will
 * return the newly created {@link kTAG_NID} identifier in the
 * {@link kTERM_STATUS_IDENTIFIER} return parameter and the updated object in the
 * {@link kAPI_RESPONSE}.
 *
 * <i>Note that all node references, specifically the {@link kTAG_TERM} attribute, must
 * be provided as either a {@link CDataTypeBinary} instance, in which case it is assumed to
 * be the {@link kTAG_NID} of the term, or as a string, in which case it is supposed to
 * be the term's {@link kTAG_GID}.</i>
 */
define( "kAPI_OP_SetVertex",		'WS:OP:SetVertex' );

/**
 * GetVertex web-service.
 *
 * This is the tag that represents the GetVertex web-service operation, which will return a
 * list of vertices according to the provided parameters:
 *
 * <ul>
 *	<li><tt>{@link kAPI_RELATION}</tt> omitted: If this parameter is omitted, it is assumed
 *		you want the vertices selected by the provided query.
 *	<li><tt>{@link kAPI_RELATION} provided</tt>: If this parameter is provided, it is
 *		assumed you want the relationships of the first vertex selected by the provided
 *		query.
 * </ul>
 *
 * The service expects the following parameters:
 *
 * <ul>
 *	<li><i>{@link kAPI_FORMAT}</i>: This parameter is required to indicate how to encode the
 *		response.
 *	<li><i>{@link kAPI_DATABASE}</i>: This parameter is required to indicate the working
 *		database.
 *	<li><i>{@link kAPI_SORT}</i>: This parameter is an array listing which fields are to
 *		be considered in the sort order, the array is indexed by the field name and the
 *		value should be a number that represents the sense: positive will be considered
 *		<i>ascending</i> and negative values <i>descending</i>; zero values will be ignored.
 *	<li><i>{@link kAPI_PAGE_LIMIT}</i>:This parameter is required or enforced, it represents
 *		the maximum number of elements that the query should return, the default value is
 *		{@link kDEFAULT_LIMIT}.
 *	<li><i>{@link kAPI_QUERY}</i>: This parameter will hold the selection criteria of the
 *		reference vertex, the nodes container will be searched.
 *	<li><i>{@link kAPI_RELATION}</i>: Depending on whether the parameter is provided:
 *	 <ul>
 *		<li><tt>{@link kAPI_RELATION_IN}</tt>: Return all vertices that point to the first
 *			vertex selected by the provided query.
 *		<li><tt>{@link kAPI_RELATION_OUT}</tt>: Return all vertices to which the first
 *			vertex selected by the provided query point to.
 *		<li><tt>{@link kAPI_RELATION_ALL}</tt>: Return all vertices related to the first
 *			vertex selected by the provided query.
 *		<li><i>missing</i>: If the parameter is missing, it is assumed you only want the
 *			vertices selected by the provided query.
 *	 </ul>
 *	<li><i>{@link kAPI_PREDICATE}</i>: This parameter is only considered if the
 *		{@link kAPI_RELATION} parameter was provided, it is constituted by a list of
 *		predicates expressed as term global identifiers, it restricts the relationships to
 *		the provided list of predicates.
 *	<li><i>{@link kAPI_SUBQUERY}</i>: This parameter is only considered if the
 *		{@link kAPI_RELATION} parameter was provided, it is a filter that will be applied to
 *		the related elements, while the {@link kAPI_QUERY} parameter applies to the origin
 *		or destination of the relations. The database is the same and the filter will be
 *		applied to nodes.
 * </ul>
 *
 * <i>Note that the {@link kAPI_SELECT} parameter will be disabled by default: since there
 * are a number of fields that reference other objects we decided to disable this option
 * rather than adding exceptions that in the long run would become difficult to track.</i>
 */
define( "kAPI_OP_GetVertex",		'WS:OP:GetVertex' );

/**
 * GetTag web-service.
 *
 * This is the tag that represents the GetTag web-service operation, which will return a
 * list of tags according to the provided parameters:
 *
 * The service expects the following parameters:
 *
 * <ul>
 *	<li><i>{@link kAPI_FORMAT}</i>: This parameter is required to indicate how to encode the
 *		response.
 *	<li><i>{@link kAPI_DATABASE}</i>: This parameter is required to indicate the working
 *		database.
 *	<li><i>{@link kAPI_SORT}</i>: This parameter is an array listing which fields are to
 *		be considered in the sort order, the array is indexed by the field name and the
 *		value should be a number that represents the sense: positive will be considered
 *		<i>ascending</i> and negative values <i>descending</i>; zero values will be ignored.
 *	<li><i>{@link kAPI_PAGE_LIMIT}</i>:This parameter is required or enforced, it represents
 *		the maximum number of elements that the query should return, the default value is
 *		{@link kDEFAULT_LIMIT}.
 *	<li><i>{@link kAPI_QUERY}</i>: This parameter will hold the selection criteria for the
 *		tag.</i>
 * </ul>
 *
 * <i>Note that the {@link kAPI_SELECT} parameter will be disabled by default: since there
 * are a number of fields that reference other objects we decided to disable this option
 * rather than adding exceptions that in the long run would become difficult to track.</i>
 */
define( "kAPI_OP_GetTag",			'WS:OP:GetTag' );

/**
 * RelateTo web-service.
 *
 * This is the tag that represents the RelateTo web-service operation, which will relate one
 * node to another.
 *
 * The service expects the following parameters:
 *
 * <ul>
 *	<li><i>{@link kAPI_FORMAT}</i>: This parameter is required to indicate how to encode the
 *		response.
 *	<li><i>{@link kAPI_DATABASE}</i>: This parameter is required to indicate the working
 *		database.
 *	<li><i>{@link kAPI_REL_FROM}</i>: This parameter is required and should contain the
 *		node identifier of the relationship subject.
 *	<li><i>{@link kAPI_REL_TO}</i>: This parameter is required and should contain the
 *		node identifier of the relationship object.
 *	<li><i>{@link kAPI_PREDICATE}</i>: This parameter is required and should contain the
 *		predicate of the relationship. If the value is an array, there will be as many
 *		relationships as predicates created.
 *	<li><i>{@link kAPI_REL_MIRROR}</i>: This optional boolean parameter, if present and
 *		<tt>TRUE</tt>, determines whether alias nodes will mirror the relationship with
 *		their masters.
 * </ul>
 */
define( "kAPI_OP_RelateTo",			'WS:OP:RelateTo' );

/**
 * GetEnums web-service.
 *
 * This is the tag that represents the GetEnums web-service operation, which will return the
 * set of controlled vocabulary items related to the provided node or tag:
 *
 * The service expects the following parameters:
 *
 * <ul>
 *	<li><i>{@link kAPI_FORMAT}</i>: This parameter is required to indicate how to encode the
 *		response.
 *	<li><i>{@link kAPI_DATABASE}</i>: This parameter is required to indicate the working
 *		database.
 *	<li><i>{@link kAPI_CLASS}</i>: This parameter is required to indicate whether the
 *		query should select a node or a term; this will also automatically set the container
 *		name if omitted.
 *	<li><i>{@link kAPI_QUERY}</i>: This parameter will hold the selection criteria for the
 *		node or tag.</i>
 * </ul>
 *
 * Once the reference node is resolved, the method will return all the edges related to
 * the reference node with a {@link kPREDICATE_ENUM_OF} predicate traversing <i>all
 * levels</i>; the {@link kAPI_COLLECTION_ID} part of the response will hold the list of
 * root enumeration nodes.
 */
define( "kAPI_OP_GetEnums",			'WS:OP:GetEnums' );

/*=======================================================================================
 *	RELATIONSHIP SENSE ENUMERATIONS														*
 *======================================================================================*/

/**
 * Input relationships.
 *
 * This enumeration represents an input relationship, or the collection of vertices that
 * point to the current node.
 */
define( "kAPI_RELATION_IN",			'WS:RELATION:IN' );

/**
 * Output relationships.
 *
 * This enumeration represents an output relationship, or the collection of vertices to
 * which the current vertex points.
 */
define( "kAPI_RELATION_OUT",		'WS:RELATION:OUT' );

/**
 * All relationships.
 *
 * This enumeration represents both input and output relationships, or the collection of
 * vertices related to the current vertex.
 */
define( "kAPI_RELATION_ALL",		'WS:RELATION:ALL' );


?>
